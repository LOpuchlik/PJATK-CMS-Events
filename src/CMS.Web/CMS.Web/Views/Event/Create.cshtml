@model CMS.Web.Requests.CreateEventRequest
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer

<script src="https://api.mapbox.com/mapbox-gl-js/v1.12.0/mapbox-gl.js"></script>
<link href="https://api.mapbox.com/mapbox-gl-js/v1.12.0/mapbox-gl.css" rel="stylesheet" />
<br /><br />
<div class="container rpw p-0 m-0">
    <h2 class="text-info"> @Localizer["AddEventHeader"] </h2>
    <form class="form-horizontal" method="post" , new
          { enctype="multipart/form-data" }>

        @Html.ValidationSummary()


        @Html.LabelFor(x => x.Name, @Localizer["EventName"].Value, new { @class = "" })
        @Html.TextBoxFor(x => x.Name,
            new { @class = "form-control" })
        @Html.ValidationMessageFor(x => x.Name, @Localizer["ValidationRequiredField"].Value)

        @Html.LabelFor(x => x.Description, @Localizer["Description"].Value, new { @class = "" })
        @Html.TextBoxFor(x => x.Description, new { @class = "form-control" })
        @Html.ValidationMessageFor(x => x.Description, @Localizer["ValidationRequiredField"].Value)

        @Html.LabelFor(x => x.Photo, @Localizer["Photo"].Value, new { @class = "" })
        <input type="file" class="form-control"
               id="Photo" name="Photo"
               accept="image/png, image/jpeg">
        @Html.ValidationMessageFor(x => x.Photo, @Localizer["ValidationRequiredField"].Value)

        @Html.LabelFor(x => x.EventType, @Localizer["EventType"].Value, new { @class = "" })
        @Html.DropDownList("EventType", Html.GetEnumSelectList<CMS.Core.Entites.EventType>(),
            @Localizer["SelectEventType"].Value, new { @class = "form-control" })
        @Html.ValidationMessageFor(x => x.EventType, @Localizer["ValidationRequiredField"].Value)


        <div id='map' style='width: 400px; height: 300px;'>
            <script>

                mapboxgl.accessToken = 'pk.eyJ1IjoibXBkOTciLCJhIjoiY2s2dWluMWlyMDlrODNscmo5ZGJydXd1dSJ9.1q0TuIH6z8RUDIjk0oznrQ'
                var map = new mapboxgl.Map({
                    container: 'map',
                    style: 'mapbox://styles/mapbox/streets-v11', // stylesheet location
                    center: [50.0, 20.0], // starting position [lng, lat]
                    zoom: 5 // starting zoom
                });

                var marker = undefined;
                map.on('mousedown', function (e) {
                    if (marker !== undefined) {
                        marker.remove();
                    }
                    marker = new mapboxgl.Marker()
                        .setLngLat(e.lngLat)
                        .addTo(map);
                    console.log(e);
                    console.log(e.lngLat);
                    var jqxhr = $.get("https://nominatim.openstreetmap.org/reverse?format=geojson&lat=" + e.lngLat.lat + "&lon=" + e.lngLat.lng,
                        function () {
                        })
                        .done(function (data) {
                            var city = data.features[0].properties.address.city;
                            var country = data.features[0].properties.address.country;

                            console.log(city + " " + country);

                            $("#Latitude").val(e.lngLat.lat);
                            $("#Longitude").val(e.lngLat.lng);
                            if (city == undefined) {
                                $("#City").val(country);
                            } else {
                                $("#City").val(city);
                            }

                        })
                        .fail(function () {
                            alert("error");
                        });
                });

            </script>
        </div>

        @Html.HiddenFor(x => x.Longitude)
        @Html.HiddenFor(x => x.Latitude)

        <div class="form-group mt-2">
            <label for="placeInput">@Localizer["Place"]</label>
            <input type="text" class="form-control" id="City" name="City">
        </div>
        <div class="form-group">
            <label for="dateInput">@Localizer["Date"]</label>
            <input type="date" class="form-control" id="Date" name="Date">
        </div>

        @Html.LabelFor(x => x.TicketPrice, @Localizer["EventPriceLabel"].Value, new { @class = "" })
        @Html.EditorFor(model => model.TicketPrice, new { htmlAttributes = new { @type = "number", @min = "0", @step = "0.01", @value = "1.99", @class = "form-control" } })
        @Html.ValidationMessageFor(x => x.TicketPrice, @Localizer["ValidationRequiredField"].Value)


        @*JS/JQUERY na kliknięcie submit musi pobrać dane z mapy/osmnames o wybranej lokalizacji i wstawić wartości do latitude i longitude (hidden input) a potem wysłac formularz*@
        <button type="submit" class="btn btn-primary">@Localizer["AddEvent"]</button>
    </form>
</div>